#!/bin/sh

remove_if_exists()
{
    if [ -e "$1" ] && ! rm -rf "$1"
    then
        exit 1
    fi
}

echo_me()
{
    echo "$ME: $*"
}

prepare()
{
    remove_if_exists "$BUILD/scroom-$VERSION"
    remove_if_exists "$BUILD/scroom_$VERSION.orig.tar.gz"
    remove_if_exists "debuild.log"
    remove_if_exists "config.log"
    remove_if_exists "configure.log"
    remove_if_exists "lucid.log"
    remove_if_exists "maverick.log"
    remove_if_exists "oneiric.log"
    remove_if_exists "precise.log"
    remove_if_exists "quantal.log"
    remove_if_exists "raring.log"
    remove_if_exists "saucy.log"
    remove_if_exists "trusty.log"
    remove_if_exists "utopic.log"
    remove_if_exists "mutracx.log"
    remove_if_exists "pdebuild.log"
}

ME="$0"
PACKAGE_NAME="@PACKAGE_NAME@"
PACKAGE_TARNAME="@PACKAGE_TARNAME@"
PACKAGE_VERSION="@PACKAGE_VERSION@"
PACKAGE_STRING="@PACKAGE_STRING@"
PACKAGE_BUGREPORT="@PACKAGE_BUGREPORT@"
PACKAGE_URL="@PACKAGE_URL@"
PACKAGE="@PACKAGE@"
VERSION=$(echo "@VERSION@" | sed -e 's/_/~/g')

# echo_me "Hello world"
# echo_me "TMPDIR:    $TMPDIR"
# echo_me "TMPSRCDIR: $TMPSRCDIR"
# echo_me "SOURCE:    $SOURCE"
# echo_me "BUILD:     $BUILD"

# Asserts...
[ -d "$TMPSRCDIR" ] || exit 1
[ -f "$SOURCE" -a -r "$SOURCE" ] || exit 1
[ -d "$BUILD" -a -w "$BUILD" ] || exit 1


if [ "$PACKAGE" != "scroom" ]
then
    echo_me "ERROR: $SOURCE doesn't contain scroom!"
    exit 1
fi
if [ -e "$TMPSRCDIR/debian" ]
then
    echo_me "ERROR: $TMPSRCDIR/debian exists"
    exit 1
fi

SNAPSHOT=0
RELEASECANDIDATE=0
RELEASE=0;
case "$VERSION" in
    *-*)
        SNAPSHOT=1;
        ;;
    *~*)
        RELEASECANDIDATE=1;
        ;;
    *)
        RELEASE=1;
        ;;
esac

echo_me "Preparing build environment"
prepare
cp -pr "$TMPSRCDIR" "$BUILD/scroom-$VERSION" || exit 1
cp "$SOURCE" "$BUILD/scroom_$VERSION.orig.tar.gz" || exit 1
cp -r ./debian "$BUILD/scroom-$VERSION/debian" || exit 1

CURDIR="$(pwd)"
cd  "$BUILD/scroom-$VERSION" || exit 1

# Todo: build package ;-)
if [ "$SNAPSHOT" -eq "1" ]
then
    cp debian/changelog.snapshot debian/changelog
    dch -d "Snapshot release" && dch -r ""
elif [ "$RELEASECANDIDATE" -eq "1" ]
then
    cp debian/changelog.release debian/changelog
    VER=$(echo "$VERSION" | cut -d'~' -f1) && \
        dch -d "Release candidate for version $VER" && \
        dch -a "For more info see https://github.com/kees-jan/scroom/wiki" && \
        dch -r ""
else
    cp debian/changelog.release debian/changelog
    dch -d "For more info see https://github.com/kees-jan/scroom/wiki" && dch -r ""
fi || exit 1

if [ "$SNAPSHOT" -eq "1" ]
then
    TARGET_PACKAGE=scroom-snapshot
    CONTROL=control.snapshot
else
    TARGET_PACKAGE=scroom-0.5
    CONTROL=control.release
fi || exit 1

sed 's/@TARGET_PACKAGE@/'"$TARGET_PACKAGE"'/' < debian/rules.in > debian/rules || exit 1
chmod +x debian/rules
cp debian/"$CONTROL" debian/control

echo_me "Creating a tar file for package flavors"
tar czfC "$TMPDIR/scroom-$VERSION-base.tgz" "$BUILD" "scroom-$VERSION"

echo_me "Building"
if ! ( make distclean && debuild -us -uc -j12 ) > "$CURDIR/debuild.log" 2>&1
then
    echo_me "ERROR: debuild failed. See debuild.log"
    exit 1
fi
echo_me "Base version done. Trying pdebuild"
if ! ( sudo pdebuild --debbuildopts "-j12" ) > "$CURDIR/pdebuild.log" 2>&1
then
    echo_me "ERROR: pdebuild failed. See pdebuild.log"
fi

cd "$CURDIR" || exit 1
cp "$BUILD/scroom-$VERSION/debian/changelog" ./debian/changelog.snapshot || exit 1
if [ "$SNAPSHOT" -eq "0" ]
then
    cp "$BUILD/scroom-$VERSION/debian/changelog" ./debian/changelog.release || exit 1
fi

# Ubuntu source packages
for source_package in precise trusty utopic
do
    echo_me $source_package
    ( rm -rf "$BUILD/$source_package" > /dev/null 2>&1 ;
        mkdir -p "$BUILD/$source_package" && 
        ln "$BUILD/scroom_$VERSION.orig.tar.gz" "$BUILD/$source_package/scroom_$VERSION.orig.tar.gz" && 
        tar xfC "$TMPDIR/scroom-$VERSION-base.tgz" "$BUILD/$source_package" && 
        cd "$BUILD/$source_package/scroom-$VERSION" &&
        if [ -d "$CURDIR/${source_package}-patches" ]
        then
            QUILT_PATCHES="$CURDIR/${source_package}-patches" quilt push -a
        else
            true
        fi &&
        dch -D "$source_package" --force-distribution -v "$(dpkg-parsechangelog | awk '/^Version: / { print $2 }')${source_package}1" \
            "$source_package edition" && 
        debuild -S -sa -us -uc -j12
        ) > ${source_package}.log 2>&1
done

# Mutracx
echo_me "Mutracx"
source_package=mutracx
(
    rm -rf "$BUILD/$source_package" > /dev/null 2>&1 ;    
    mkdir -p "$BUILD/$source_package" && 
    ln "$BUILD/scroom_$VERSION.orig.tar.gz" "$BUILD/$source_package/scroom_$VERSION.orig.tar.gz" && 
    tar xfC "$TMPDIR/scroom-$VERSION-base.tgz" "$BUILD/$source_package" && 
    cd "$BUILD/$source_package/scroom-$VERSION" && 
    QUILT_PATCHES="$CURDIR/${source_package}-patches" quilt push -a &&
    dch -D "hardy" --force-distribution -v "$(dpkg-parsechangelog | awk '/^Version: / { print $2 }')${source_package}1" "Mutracx edition" && 
    sudo DIST=mutracx ARCH=amd64 pdebuild --debbuildopts "-j12 -sa" && 
    sudo DIST=mutracx ARCH=i386  pdebuild --debbuildopts "-j12 -B"
    ) > ${source_package}.log 2>&1

